#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\begin_preamble
\date{}
\usepackage{fancyhdr}
\pagestyle{fancy}
\renewcommand{\headrulewidth}{0pt}
\rfoot{\scriptsize Bryan Herman}
\usepackage{color}
\usepackage{algorithmic}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 12
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 1in
\topmargin 1in
\rightmargin 1in
\bottommargin 1in
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\bullet 0 0 0 -1
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\noindent
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100line%"
height "1pt"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thispagestyle{empty}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center

\shape smallcaps
\size giant
Problem Set 1
\end_layout

\begin_layout Standard
\align center

\size largest
22.S904 Nuclear Reactor Kinetics
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
\align center

\size largest
Due: 17 September 2011
\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
\align center

\size largest
Bryan Herman
\end_layout

\begin_layout Standard
\noindent
\begin_inset CommandInset line
LatexCommand rule
offset "0.5ex"
width "100line%"
height "1pt"

\end_inset


\end_layout

\begin_layout Section*
PART A
\end_layout

\begin_layout Standard
An 8-group point kinetics code was developed using Fortran.
 The code uses an xml-based user input where the user can input a reactivity
 and time profile.
 Also, each coarse time mesh can have an associated time step.
 The standard point kinetics equations (constant kinetics parameters, no
 external source) solved in the code are listed below:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\frac{d}{dt}T\left(t\right)=\frac{\rho\left(t\right)-\beta}{\Lambda}T\left(t\right)+\sum_{i}\lambda_{i}C_{i}\left(t\right)
\]

\end_inset

 
\begin_inset Formula 
\[
\frac{d}{dt}C_{i}\left(t\right)=\frac{\beta_{i}}{\Lambda}T\left(t\right)-\lambda_{i}C_{i}\left(t\right).
\]

\end_inset

Note that this gives us 9 equations, 1 for the power and 8 for the precursors.
 The steady state relationship between power and precursor can be determined
 by setting the time derivative in the precursor equation to zero.
 This yields
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
C_{i}^{0}=\frac{\beta_{i}}{\Lambda\lambda_{i}}T^{0}.
\]

\end_inset

 In this code the power always starts from unity (fraction of nominal power)
 where the reactivity is initially zero.
 Setting up a linear system of these 9 equations yields
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\frac{d}{dt}\left[N\left(t\right)\right]=\frac{d}{dt}\left[\begin{array}{c}
T\left(t\right)\\
C_{1}\left(t\right)\\
C_{2}\left(t\right)\\
C_{3}\left(t\right)\\
C_{4}\left(t\right)\\
C_{5}\left(t\right)\\
C_{6}\left(t\right)\\
C_{7}\left(t\right)\\
C_{8}\left(t\right)
\end{array}\right]=\left[\begin{array}{ccccccccc}
\frac{\rho\left(t\right)-\beta}{\Lambda} & \lambda_{1} & \lambda_{2} & \lambda_{3} & \lambda_{4} & \lambda_{5} & \lambda_{6} & \lambda_{7} & \lambda_{8}\\
\frac{\beta_{1}}{\Lambda} & -\lambda_{1}\\
\frac{\beta_{2}}{\Lambda} &  & -\lambda_{2}\\
\frac{\beta_{3}}{\Lambda} &  &  & -\lambda_{3}\\
\frac{\beta_{4}}{\Lambda} &  &  &  & -\lambda_{4}\\
\frac{\beta_{5}}{\Lambda} &  &  &  &  & -\lambda_{5}\\
\frac{\beta_{6}}{\Lambda} &  &  &  &  &  & -\lambda_{6}\\
\frac{\beta_{7}}{\Lambda} &  &  &  &  &  &  & -\lambda_{7}\\
\frac{\beta_{8}}{\Lambda} &  &  &  &  &  &  &  & -\lambda_{8}
\end{array}\right]\left[N\left(t\right)\right].
\]

\end_inset

 We can write this simply in matrix notation as 
\begin_inset Formula 
\[
\frac{d}{dt}\left[N\left(t\right)\right]=\left[A\left(t\right)\right]\left[N\left(t\right)\right].
\]

\end_inset

 We can integrate this analytically as
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\left[N\left(t\right)\right]=\left[N\left(0\right)\right]\exp\left\{ \int_{0}^{t^{\prime}}\left[A\left(t^{\prime}\right)\right]dt^{\prime}\right\} .
\]

\end_inset

 We can make an assumption that we take the matrix inside the integrate
 at time t if it does not rapidly change.
 Therefore, the final equation is
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\left[N\left(t\right)\right]=\left[N\left(0\right)\right]\exp\left\{ \left[A\left(t\right)\right]dt\right\} .
\]

\end_inset

 The exponential term on the right hand side is known as the 
\emph on
matrix exponential
\emph default
.
 There are many ways to approximate this.
 In this Fortran implementation we use a Pade approximation.
 The solution algorithm is presented in the next section.
 We can discretize the system for any time step, 
\emph on
k, 
\emph default
as
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\boxed{\left[N^{k}\right]=\left[N^{k-1}\right]\exp\left\{ \left[A^{k}\right]dt^{k-1}\right\} .}
\]

\end_inset

 The source code to the main point kinetics is listed in the Appendix.
 
\end_layout

\begin_layout Subsection*
Solving the Matrix Exponential - Pade Approximation
\end_layout

\begin_layout Standard
The theory for the approximation of the Pade Approximation presented here
 is summarized from 
\emph on
Nineteen Dubious Ways to Compute the Exponential of a Matrix, Twenty-Five
 Years Later
\emph default
.
 The Pade approximation of an exponential, 
\begin_inset Formula $\exp\left(A\right)$
\end_inset

 is defined as
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
R_{pq}\left(A\right)=\left[D_{pq}\left(A\right)\right]^{-1}E_{pq}\left(A\right).
\]

\end_inset

 The numerator and denominator are defined by 
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
E_{pq}\left(A\right)=\sum_{j=0}^{q}\frac{\left(p+q-j\right)!p!}{\left(p+q\right)!j!\left(p-j\right)!}A^{j}
\]

\end_inset

 and 
\begin_inset Formula 
\[
D_{pq}\left(A\right)=\sum_{j=0}^{q}\frac{\left(p+q-j\right)!p!}{\left(p+q\right)!j!\left(p-j\right)!}\left(-A^{j}\right).
\]

\end_inset

 Before the Pade approximation is made, the method of 
\emph on
scaling and squaring
\emph default
 is used to avoid numerical roundoff error.
 To scale the exponential, it can be written as
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\exp\left(A\right)=\left[\exp\left(A/m\right)\right]^{m}.
\]

\end_inset

 The criterion to choose a parameter like 
\emph on
m
\emph default
 is that 
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\left\Vert A/2^{e-1}\right\Vert _{\infty}\leq1/2.
\]

\end_inset

The integer value of 
\begin_inset Formula $e$
\end_inset

 can be easily calculation and will be used at the end of the approximation
 to undo the scaling.
 After the matrix is scaled, the Pade approximation can be made.
 From above, the Pade approximation coefficients have numerous factorials
 and can be costly to compute.
 For example if we take this out to 4 terms and compute the diagonal approximate
 where, 
\begin_inset Formula $p=q=6$
\end_inset

, we can see that it is
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\sum_{j=0}^{q}\frac{\left(p+q-j\right)!p!}{\left(p+q\right)!j!\left(p-j\right)!}=1+\frac{11!6!}{12!5!}+\frac{10!6!}{12!2!4!}+\frac{9!6!}{12!3!3!}+...
\]

\end_inset

 We can simply some of the factorials as
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
1+\frac{6}{12}+\frac{6\cdot5}{12\cdot11\cdot2}+\frac{6\cdot5\cdot4}{12\cdot11\cdot10\cdot3\cdot2}+...
\]

\end_inset

What we see from this is that each succeeding term has the terms of the
 previous value when greater than the second term.
 Thus, we can always factor out all of the preceeding coefficients,
\begin_inset Formula 
\[
1+\frac{6}{12}+\left(\frac{6}{12}\right)\frac{5}{11\cdot2}+\left(\frac{6}{12}\right)\left(\frac{5}{11\cdot2}\right)\frac{4}{10\cdot3}+...
\]

\end_inset

 Therefore for every term, we will now the multiplication of the terms in
 parathesis from the previous coefficient.
 We just need to write an algorithm for the terms in fractions.
 We notice that starting from
\emph on
 
\emph default

\begin_inset Formula $j=1$
\end_inset

 term, the value of the numerator has to do with 
\emph on
q
\emph default
.
 The numerator can always be computed as 
\begin_inset Formula $num=q-j+1$
\end_inset

.
 The denominator is always made up of two terms.
 One of them is the term number, 
\begin_inset Formula $j$
\end_inset

.
 The other is just 
\begin_inset Formula $2q-j+1$
\end_inset

.
 Therefore we can compute any Pade coefficient, 
\begin_inset Formula $c_{j}$
\end_inset

 with the following algorithm:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
c_{j}=c_{j-1}\frac{q-j+1}{j\cdot\left(2q-j+1\right)},\quad j=1,2,...
\]

\end_inset

 Once the numerator, 
\begin_inset Formula $E_{qq}$
\end_inset

 and denominator 
\begin_inset Formula $D_{qq}$
\end_inset

 are computed the Pade approximation of them is just the division of the
 matrices.
 The last step is undo the scaling that was done at the beginning of the
 algorithm.
 This can be done with
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\exp\left(A\right)\approx R_{qq}^{s}.
\]

\end_inset

 The algorithm of this method is presented below.
 The acutal Fortran source code written is available in the Appendix.
 For all complicated matrix operations, LAPACK routines were used.
 
\end_layout

\begin_layout Standard
\align center
\begin_inset Float algorithm
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Matrix Exponential - Pade Approximation with Squaring and Scaling
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{algorithmic}[1]
\end_layout

\begin_layout Plain Layout


\backslash
STATE compute norm-inf of matrix, $
\backslash
left
\backslash
Vert A
\backslash
right
\backslash
Vert _{
\backslash
infty}$
\end_layout

\begin_layout Plain Layout


\backslash
STATE get scaling parameter ($s$): determine $e$ such that $norm = f
\backslash
cdot2^{e}$, $s = 
\backslash
mathrm{max}
\backslash
left(0,e+1
\backslash
right)$
\end_layout

\begin_layout Plain Layout


\backslash
STATE initialize Pade numerator ($E$) and denominator ($D$) with a diagonal
 of ones (takes care of zeroth term)
\end_layout

\begin_layout Plain Layout


\backslash
STATE initialize Pade coefficient, $c=1$
\end_layout

\begin_layout Plain Layout


\backslash
FOR{$j=1,2,3,...q$}
\end_layout

\begin_layout Plain Layout

	
\backslash
STATE Compute Pade coefficient, c=c*(q-j+1)/(j*(2(q-j+1))
\end_layout

\begin_layout Plain Layout

	
\backslash
STATE Perform matrix multiplication for $A^{j}$
\end_layout

\begin_layout Plain Layout

	
\backslash
STATE Compute numerator, $E = E + c*A^{j}$
\end_layout

\begin_layout Plain Layout

	
\backslash
STATE Compute denominator, $D = D (+/-) c*A^{j}$
\end_layout

\begin_layout Plain Layout


\backslash
ENDFOR
\end_layout

\begin_layout Plain Layout


\backslash
STATE Compute approximate, $R = D^{-1}E$
\end_layout

\begin_layout Plain Layout


\backslash
STATE Undo scaling, $R = R^{s}$
\end_layout

\begin_layout Plain Layout


\backslash
end{algorithmic}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Steady State Results
\end_layout

\begin_layout Standard
With any transient code, it is important to check that if the system starts
 in equilibrium and not perturbation is made to the system, the values do
 not change.
 This was simulated in the point kinetics code where a reactivity curve
 was input of all zeros.
 Therefore, we expect that the fractional power stays constant at zero.
 Below is a plot that shows the code can hold steady state.
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename ../partA/steady.pdf

\end_inset


\end_layout

\begin_layout Section*
PART B
\end_layout

\begin_layout Standard
From the output of the code, the total value of beta and pnl is:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\boxed{\beta=0.006648\qquad\Lambda=1.866\times10^{-5}\,\mathrm{s}.}
\]

\end_inset

 The output of a point kinetics run can be viewed in the Appendix.
 The plot below shows fraction power vs.
 time during the transient for different time steps.
 
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename ../partB/power_compare.pdf

\end_inset


\end_layout

\begin_layout Standard
The plot above shows that once the time step becomes 0.1 seconds it very
 hard to visually see any differences.
 To be conservative we use a time step of 0.01 seconds.
 This time step is shown below with the corresponding reactivity input curve.
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename ../partB/power_react.pdf

\end_inset


\end_layout

\begin_layout Section*
PART C
\end_layout

\begin_layout Standard
In this part we are tasked with writing an inverse point kinetics tool.
 In inverse kinetics, a power amplitude shape is used to determine a correspondi
ng reactivity curve.
 We can start the derivation looking at the precursor balance equation for
 group 
\emph on
i
\emph default
,
\begin_inset Formula 
\[
\frac{d}{dt}C_{i}\left(t\right)=\frac{\beta_{i}}{\Lambda}T\left(t\right)-\lambda C_{i}\left(t\right).
\]

\end_inset

 Since we know the power dependence the equations are no longer coupled.
 We can solve this differential equation analytically as
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\frac{d}{dt}C_{i}\left(t\right)+\lambda C_{i}\left(t\right)=\frac{\beta_{i}}{\Lambda}T\left(t\right).
\]

\end_inset

 The integrating factor is 
\begin_inset Formula $\exp\left(\lambda_{i}t\right)$
\end_inset

.
 Going through the analysis we can arrive at:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\exp\left(\lambda_{i}t\right)\frac{d}{dt}C_{i}\left(t\right)+\exp\left(\lambda_{i}t\right)\lambda C_{i}\left(t\right)=\exp\left(\lambda_{i}t\right)\frac{\beta_{i}}{\Lambda}T\left(t\right),
\]

\end_inset

 
\begin_inset Formula 
\[
\frac{d}{dt}\left[\exp\left(\lambda_{i}t\right)C_{i}\left(t\right)\right]=\exp\left(\lambda_{i}t\right)\frac{\beta_{i}}{\Lambda}T\left(t\right),
\]

\end_inset


\begin_inset Formula 
\[
\int\frac{d}{dt}\left[\exp\left(\lambda_{i}t\right)C_{i}\left(t\right)\right]dt=\int\exp\left(\lambda_{i}t\right)\frac{\beta_{i}}{\Lambda}T\left(t\right)dt,
\]

\end_inset

 
\begin_inset Formula 
\[
\exp\left(\lambda_{i}t\right)C_{i}\left(t\right)=\frac{\beta_{i}}{\Lambda}\int\exp\left(\lambda_{i}t\right)T\left(t\right)dt.
\]

\end_inset

In order to perform that integral on the right hand side the analytic shape
 of the power amplitude must be known.
 However, if the time step is small enough we can just pull it out of the
 integral as a constant and assume it is the average power of the time step.
 This is shown as
\begin_inset Formula 
\[
\exp\left(\lambda_{i}t\right)C_{i}\left(t\right)=\frac{\beta_{i}}{\Lambda}\bar{T}\int\exp\left(\lambda_{i}t\right)dt.
\]

\end_inset

 The general form of the equation is 
\begin_inset Formula 
\[
\exp\left(\lambda_{i}t\right)C_{i}\left(t\right)=\frac{\beta_{i}}{\lambda_{i}\Lambda}\bar{T}\exp\left(\lambda_{i}t\right)+\tilde{C},
\]

\end_inset

 
\begin_inset Formula 
\[
C_{i}\left(t\right)=\frac{\beta_{i}}{\lambda_{i}\Lambda}\bar{T}+\tilde{C}\exp\left(\lambda_{i}t\right).
\]

\end_inset

 The integration constant can be determine since we know from the initial
 power what the initial precursor concentration is.
 This constant can be evaluated as
\begin_inset Formula 
\[
C_{i}^{0}=\frac{\beta_{i}}{\lambda_{i}\Lambda}\bar{T}+\tilde{C},
\]

\end_inset

 
\begin_inset Formula 
\[
\tilde{C}=C_{i}^{0}-\frac{\beta_{i}}{\lambda_{i}\Lambda}\bar{T}.
\]

\end_inset

 Substituting this back in to the general equation yields the final for
 of the precursor equation,
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
C_{i}\left(t\right)=\frac{\beta_{i}}{\lambda_{i}\Lambda}\bar{T}+\left(C_{i}^{0}-\frac{\beta_{i}}{\lambda_{i}\Lambda}\bar{T}\right)\exp\left(\lambda_{i}t\right),
\]

\end_inset


\begin_inset Formula 
\[
C_{i}\left(t\right)=C_{i}^{0}\exp\left(\lambda_{i}t\right)+\frac{\beta_{i}}{\lambda_{i}\Lambda}\bar{T}\left[1-\exp\left(\lambda_{i}t\right)\right].
\]

\end_inset

 This will be solved over a time step so that the above approximations are
 valid.
 The discretized equation then becomes 
\begin_inset Formula 
\[
\boxed{C_{i}^{k+1}=C_{i}^{k}\exp\left(\lambda_{i}dt^{k}\right)+\frac{\beta_{i}}{\lambda_{i}\Lambda}\bar{T}^{k}\left[1-\exp\left(\lambda_{i}dt^{k}\right)\right].}
\]

\end_inset

 The power equation solved for reactivity is 
\begin_inset Formula 
\[
\rho\left(t\right)=\frac{\Lambda}{T\left(t\right)}\frac{d}{dt}T\left(t\right)+\beta-\frac{\Lambda}{T\left(t\right)}\sum_{i}\lambda_{i}C_{i}\left(t\right).
\]

\end_inset

 This can be discretized using a simple backward finite difference for the
 derivative so that
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\boxed{\rho^{k+1}=\frac{\Lambda}{T^{k+1}}\frac{T^{k+1}-T^{k}}{dt}+\beta-\frac{\Lambda}{T^{k+1}}\sum_{i}\lambda_{i}C_{i}^{k}.}
\]

\end_inset

 These physics equation were implemented into a different Fortran code.
 The physics routines of the code can be viewed in the Appendix.
 
\end_layout

\begin_layout Standard
The given problem specifies a fixed power amplitude as a function of time
 as follows:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\left[\begin{array}{cc}
Time\,\mathrm{[s]} & Power\,\mathrm{[W]}\\
0 & 1\\
2 & 1\\
2.01 & 10000\\
10 & 10000\\
12 & 100\\
20 & 100
\end{array}\right]
\]

\end_inset

 From running the code several times, we added the time step for each of
 these regions.
 To get the right shape after the reactivity insertion an extra time was
 put in to finer resolve the discretization:
\begin_inset Formula 
\[
\left[\begin{array}{ccc}
Time\,\mathrm{[s]} & Power\,\mathrm{[W]} & Time\, step\,\mathrm{\left[s\right]}\\
0 & 1 & 0.1\\
2 & 1 & 3\times10^{-8}\\
2.01 & 10000 & 3\times10^{-5}\\
3.0 & 10000 & 0.001\\
10 & 10000 & 0.0001\\
12 & 100 & 0.1\\
20 & 100 & --
\end{array}\right]
\]

\end_inset

 The input and output of the inverse point kinetics run is available in
 the Appendix.
 The resulting power and predicted reactivity curves are shown in the plot
 below.
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename ../partC/ipke/ipke_results.pdf

\end_inset


\end_layout

\begin_layout Standard
Although the full scale of the reactivity can't be seen, the reactivity
 peaks at about 
\series bold
2700 dollars
\series default
! This is obviously ridiculous for an actual reactor system.
 We can then take this reactivity curve and run it in the point kinetics
 solver to see if the original power amplitude shape can be recovered.
 The input and output of this run can be viewed in the Appendix.
 Since the data can get large to port between the codes, a binary output
 file is written and can be read in by point kinetics code.
 The same power and reactivity plot is shown below except from the point
 kinetics solver.
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename ../partC/pke/powereact.pdf

\end_inset


\end_layout

\begin_layout Standard
We can see from this plot that the power doesnt quite get up to 10000 W.
 Other than that it matches the plot from inverse kinetics well.
 For comparison we plot it against the reference power from the problem
 statement below.
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename ../partC/pke/powerboth.pdf

\end_inset


\end_layout

\begin_layout Standard
We miss the power prediction by about 1.5%.
 This is due to the approximations of the time derivative of the power.
 As we make the time steps infinitesimally small, the power should be in
 better agreement.
 This was the best prediction with the amount of time needed to run the
 code.
\end_layout

\begin_layout Section*
\start_of_appendix
APPENDIX 
\end_layout

\begin_layout Subsection*
Source Code
\end_layout

\begin_layout Subsubsection*
Point Kinetics Main Physics Solver
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../src/pkes/physics.F90"
lstparams "basicstyle={\\small},breakatwhitespace=false,breaklines=true,commentstyle={\\color[rgb]{0.133,0.545,0.133}},frame=shadowbox,identifierstyle={\\ttfamily},keywordstyle={\\bfseries\\ttfamily\\color[rgb]{0,0,1}},language=Fortran,linewidth=7in,numbers=none,prebreak={\\raisebox{0ex}[0ex][0ex]{\\ensuremath{\\hookleftarrow}}},showstringspaces=false,stepnumber=1,stringstyle={\\ttfamily\\color[rgb]{0.627,0.126,0.941}},tabsize=4,xleftmargin={-0.5in}"

\end_inset


\end_layout

\begin_layout Subsubsection*
Inverse Point Kinetics Main Physics Solver
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../src/ipkes/physics.F90"
lstparams "basicstyle={\\small},breakatwhitespace=false,breaklines=true,commentstyle={\\color[rgb]{0.133,0.545,0.133}},frame=shadowbox,identifierstyle={\\ttfamily},keywordstyle={\\bfseries\\ttfamily\\color[rgb]{0,0,1}},language=Fortran,linewidth=7in,numbers=none,prebreak={\\raisebox{0ex}[0ex][0ex]{\\ensuremath{\\hookleftarrow}}},showstringspaces=false,stepnumber=1,stringstyle={\\ttfamily\\color[rgb]{0.627,0.126,0.941}},tabsize=4,xleftmargin={-0.5in}"

\end_inset


\end_layout

\begin_layout Subsubsection*
Matrix Exponential Solver - Pade Approximation
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "../src/pkes/solvers.F90"
lstparams "basicstyle={\\small},breakatwhitespace=false,breaklines=true,commentstyle={\\color[rgb]{0.133,0.545,0.133}},frame=shadowbox,identifierstyle={\\ttfamily},keywordstyle={\\bfseries\\ttfamily\\color[rgb]{0,0,1}},language=Fortran,linewidth=7in,numbers=none,prebreak={\\raisebox{0ex}[0ex][0ex]{\\ensuremath{\\hookleftarrow}}},showstringspaces=false,stepnumber=1,stringstyle={\\ttfamily\\color[rgb]{0.627,0.126,0.941}},tabsize=4,xleftmargin={-0.5in}"

\end_inset


\end_layout

\begin_layout Subsection*
Part B Runs
\end_layout

\begin_layout Subsubsection*
Point Kinetics Input
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../partB/input.xml"
lstparams "basicstyle={\\small},breakatwhitespace=false,breaklines=true,commentstyle={\\color[rgb]{0.133,0.545,0.133}},identifierstyle={\\ttfamily},keywordstyle={\\bfseries\\ttfamily\\color[rgb]{0,0,1}},language=XML,linewidth=7in,numbers=none,prebreak={\\raisebox{0ex}[0ex][0ex]{\\ensuremath{\\hookleftarrow}}},showstringspaces=false,stepnumber=1,stringstyle={\\ttfamily\\color[rgb]{0.627,0.126,0.941}},tabsize=4,xleftmargin={-0.5in}"

\end_inset


\end_layout

\begin_layout Subsubsection*
Point Kinetics Output
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../partB/stdout"

\end_inset


\end_layout

\begin_layout Subsection*
Part C Runs
\end_layout

\begin_layout Subsubsection*
Inverse Point Kinetics Input
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../partC/ipke/input.xml"

\end_inset


\end_layout

\begin_layout Subsubsection*
Inverse Point Kinetics Output
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../partC/ipke/stdout"

\end_inset


\end_layout

\begin_layout Subsubsection*
Point Kinetics Input
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../partC/pke/input.xml"

\end_inset


\end_layout

\begin_layout Subsubsection*
Point Kinetics Output
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand verbatiminput
filename "../partC/pke/stdout"

\end_inset


\end_layout

\end_body
\end_document
